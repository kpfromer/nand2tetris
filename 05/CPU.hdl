// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

// TODO: clean up
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // General
    Not(in=instruction[15], out=Ainstruction);

    // Jump and Program Counter
    Not(in=aluZero,out=aluNotZero);
    Or(a=aluZero,b=aluNeg,out=aluNegOrZero);
    Not(in=aluNeg,out=aluNotNeg);
    And(a=aluNotNeg,b=aluNotZero,out=aluPos);
    Mux8Way(
        a=false, // no jump
        b=aluPos, // JGT out>0
        c=aluZero, // JEQ out = 0
        d=aluNotNeg, // JGE out >= 0
        e=aluNeg, // JLT out < 0
        f=aluNotZero, // JNE out != 0
        g=aluNegOrZero, // JLE out <= 0
        h=true, // JMP - Always jump
        sel=instruction[0..2],
        out=canJump
    );
    // is a c instruction
    And(a=canJump,b=instruction[15],out=jump);
    // Jump Address if jump then pc = M else pc = pc+1
    // in = canJump address = M
    PC(in=ao,reset=reset,load=jump,inc=true,out[0..14]=pc);

    //A
    // C instruction and dest is a
    And(a=instruction[5],b=instruction[15],out=cDestA);
    // A instruction
    Or(a=Ainstruction,b=cDestA,out=aLoad);
    // Value to use from c or a instruction
    Mux16(a=instruction,b=aluOut,sel=cDestA,out=aValue);
    ARegister(in=aValue,load=aLoad,out=ao,out[0..14]=addressM);
    //D
    And(a=instruction[4],b=instruction[15],out=dLoad);
    DRegister(in=aluOut,load=dLoad,out=do);

    And(a=instruction[15],b=instruction[3],out=writeM);

    // C instruction
    // Get a value
    Mux16(a=ao,b=inM,sel=instruction[12],out=compV);

    // ALU
    ALU(
        x=do,y=compV,
        zx=instruction[11],
        nx=instruction[10], 
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=aluZero,
        ng=aluNeg
    );
}
