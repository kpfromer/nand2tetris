// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Zero
   // x
   Mux16(a=x,b=false,sel=zx,out=xo1);
   // y
   Mux16(a=y,b=false,sel=zy,out=yo1);
   // Negate
   // x
   Not16(in=xo1,out=nxo1);
   Mux16(a=xo1,b=nxo1,sel=nx,out=xo2);
   // y
   Not16(in=yo1,out=nyo1);
   Mux16(a=yo1,b=nyo1,sel=ny,out=yo2);
   // Compute
   And16(a=xo2,b=yo2,out=andOut);
   Add16(a=xo2,b=yo2,out=addOut);
   // Decide on compute type
   Mux16(a=andOut,b=addOut,sel=f,out=computeOut);
   // Final Negate
   Not16(in=computeOut,out=nComputeOut);
   Mux16(a=computeOut,b=nComputeOut,sel=no,out=out);
   // Out = 0
   // This is a make shift Or16Way
   Mux16(a=computeOut,b=nComputeOut,sel=no,out[0..7]=aa,out[8..15]=bb);
   Or8Way(in=aa, out=xx);
   Or8Way(in=bb, out=zz);
   Or(a=xx, b=zz, out=nzr);
   Not(in=nzr, out=zr);
   //Or16Way(a=out,out=nzr);
   // Less than zero
   Mux16(a=computeOut,b=nComputeOut,sel=no,out[15]=isNeg);
   And(a=isNeg,b=true,out=ng);
   // Don't know why this is not working: And(a=out[15],b=true,out=ng);
   // I dont know how to use .hdl right ng
}
